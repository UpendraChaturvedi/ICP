class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        int pre[][]=new int [m][n];
        for(int j=0;j<n;j++){
            int s=0;
            for(int i=0;i<m;i++){
                s+=1;
                if(matrix[i][j]=='0')s=0;
                pre[i][j]=s;
            }
        }
        int max=0;
        for(int i=0;i<m;i++){
            max=Math.max(max,maxArea(pre[i]));
        }
        return max;
    }
    public static int  maxArea(int pre[]){
        int n=pre.length;
        int left[]=new int [n];
        int right[]=new int [n];
        int mx=0;
        Stack<Integer>st=new Stack<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && pre[st.peek()]>=pre[i]){
                st.pop();
            }
            left[i]=(st.isEmpty()==true)?-1:st.peek();
            st.push(i);
        }
        st.clear();
        
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && pre[st.peek()]>=pre[i]){
                st.pop();
            }
            right[i]=st.isEmpty()==true?n:st.peek();
            st.push(i);
            
        }
        for(int i=0;i<n;i++){
            int h=pre[i];
            int w=right[i]-left[i]-1;
            mx=Math.max(mx,h*w);
        }
        return mx;
    }
    
}
